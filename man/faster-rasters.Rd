% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/faster-rasters.R
\docType{methods}
\name{fastMask}
\alias{fastMask}
\alias{fastRasterize}
\title{Faster operations on rasters}
\usage{
fastMask(stack, polygon)

fastRasterize(polygon, ras, field, filename, useGdal, datatype)
}
\arguments{
\item{stack}{A \code{RasterStack} object.}

\item{polygon}{A \code{SpatialPolygons} object.}

\item{ras}{A \code{RasterLayer} object.}

\item{field}{The field to use from \code{polygon}.}

\item{filename}{Character string giving the filename. Note: if \code{filename}
is supplied, only the basename of the file is used, and the
the output raster will be saved using \code{.tif} format.}

\item{useGdal}{Logical. If missing (default), the function will}

\item{datatype}{Passed to raster object and disk-format. See \code{\link[raster]{dataType}}}
}
\value{
A \code{Raster*} object.
}
\description{
These alternatives to \code{mask} and \code{rasterize} are not as general as
the originals. \code{fastRasterize} uses either \code{velox} package or,
if \code{gdal} is installed and accessible by \code{rgdal::getGDALVersionInfo}
and the version is > 2.0, then it will default to \code{gdalUtils::gdal_rasterize}.
This default will be overridden for "small" rasters (fewer than 2e+6 cells),
as \code{velox} is faster in those cases.
The user can specify whether to use \code{GDAL} with the \code{useGdal} argument.
For \code{fastMask}, the function uses use \code{raster::extract} internally,
which is parallel-aware. So, using this function with a cluster having been
created via \code{beginCluster} will be much faster than \code{mask}.
}
\details{
\code{fastRasterize} will try to keep the object in memory or on disk,
depending on whether the input raster was on disk.
}
\note{
This is experimental and not all combinations of parameters or object
types will work, e.g., \code{fastMask} must be given a \code{RasterStack}.
}
\examples{
\dontrun{
library(raster)
library(sp)

Sr1 <- Polygon(cbind(c(2, 4, 4, 0.9, 2), c(2, 3, 5, 4, 2)))
Sr2 <- Polygon(cbind(c(5, 4, 2, 5), c(2, 3, 2, 2)))
Sr3 <- Polygon(cbind(c(4, 4, 5, 10, 4), c(5, 3, 2, 5, 5)))

Srs1 <- Polygons(list(Sr1), "s1")
Srs2 <- Polygons(list(Sr2), "s2")
Srs3 <- Polygons(list(Sr3), "s3")
shp <- SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
d <- data.frame(vals = 1:3, other = letters[1:3])
row.names(d) <- names(shp)
shp <- SpatialPolygonsDataFrame(shp, data = d)
poly <- list()
poly[[1]] <- raster(extent(shp), vals = 0, res = c(1, 1))
poly[[2]] <- raster(extent(shp), vals = 1, res = c(1, 1))
origStack <- stack(poly)

# rasterize
shpRas1 <- raster::rasterize(shp, origStack, field = "vals")
shpRas2 <- fastRasterize(shp, origStack, field = "vals", useGdal = FALSE, datatype = "FLT4S")
shpRas3 <- fastRasterize(shp, origStack, field = "vals", useGdal = TRUE, datatype = "FLT4S")
if (require("testthat")) {
  expect_equal(shpRas1, shpRas2)
  expect_equal(shpRas1, shpRas3)
}

if (interactive()) plot(shpRas2)

# original mask function in raster
newStack1 <- mask(origStack, mask = shp)

# fastMask uses cluster
newStack2 <- fastMask(stack = origStack, polygon = shp)

# test all equal
identical(newStack1, newStack2)
newStack1 <- stack(newStack1)
newStack2 <- stack(newStack2)

if (interactive()) {
  plot(newStack2[[1]])
  plot(shp, add = TRUE)
}
}

}
\author{
Eliot Mcintire
}
